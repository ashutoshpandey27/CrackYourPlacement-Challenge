class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {

        // make adjacency list

        vector<pair<int,int>>adj[n]; // u - > { v , cost }

        for(auto &it : flights)
        {
            int u = it[0];

            int v = it[1];

            int cost = it[2];

            adj[u].push_back({v , cost});
        }

        vector<int>dist(n , 1e9);

        dist[src] = 0;

        queue<pair<int,int>>q;

        q.push({src , 0});

        while(!q.empty() and k >= 0)
        {
            int size = q.size();

            while(size--)
            {
                int u = q.front().first;

                int priceFromSrc = q.front().second;

                q.pop();

                for(auto &it: adj[u])
                {
                    int node = it.first;

                    int cost = it.second;

                    if(dist[node] > priceFromSrc + cost)
                    {
                        dist[node] = priceFromSrc + cost;

                        q.push({node , dist[node]});
                    }

                }


            }

            k--;
        }

        for(auto it : dist)
            cout<<it<<" ";

        if(dist[dst] == 1e9)
            return -1;

        return dist[dst];

        
    }
};
