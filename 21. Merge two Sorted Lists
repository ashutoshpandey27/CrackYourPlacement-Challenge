/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        ListNode* curr1 = list1, *curr2 = list2, *head = NULL, *tail = NULL;

        while(curr1 and curr2)
        {
            if(curr1->val <= curr2->val)
            {
                if(!head)
                {
                    head = tail = curr1;
                }
                else
                {
                    tail->next = curr1;

                    tail = tail->next;
                }

                curr1 = curr1->next;
            }
            else
            {
                 if(!head)
                {
                    head = tail = curr2;
                }
                else
                {
                    tail->next = curr2;

                    tail = tail->next;
                }

                curr2 = curr2->next;
            }

           
        }

        while(curr1)
        {
                if(!head)
                {
                    head = tail = curr1;
                }
                else
                {
                    tail->next = curr1;

                    tail = tail->next;
                }

                curr1 = curr1->next;
        }

        while(curr2)
        {
                if(!head)
                {
                    head = tail = curr2;
                }
                else
                {
                    tail->next = curr2;

                    tail = tail->next;
                }

                curr2 = curr2->next;
        }

        return head;
        
    }
};
