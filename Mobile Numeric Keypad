class Solution {
    
    private:
    
    long long solve(int curr , int n , unordered_map<int , vector<int>>&mp ,  vector<vector<long long>>&dp)
    {
        if(n == 1)
            return 1;
            
        if(dp[curr][n] != -1)
            return dp[curr][n];
            
        long long cnt = 0;
        
        for(auto it : mp[curr])
            cnt += solve(it , n - 1 , mp , dp);
            
        return dp[curr][n] = cnt;
    }
  public:
    long long getCount(int n) {
        
        unordered_map<int , vector<int>>mp;
        
        mp[0] = {0 , 8};
        mp[1] = {1 , 2 , 4};
        mp[2] = {1 , 2 , 3 , 5};
        mp[3] = {2 , 3 , 6};
        mp[4] = {1 , 4 , 5 , 7};
        mp[5] = {2 , 4 , 5 , 6 , 8};
        mp[6] = {3 , 5 , 6 , 9};
        mp[7] = {4 , 7 , 8};
        mp[8] = {5 , 7 , 8 , 9 , 0};
        mp[9] = {6 , 8 , 9};
        
        long long cnt = 0;
        
        vector<vector<long long>>dp(10 , vector<long long>(n+1 , -1));
        
        for(int i = 0 ; i <= 9 ; i++)
        {
            cnt += solve(i , n , mp , dp);
        }
        
        return cnt;
        
    
    }
};
