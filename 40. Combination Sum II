class Solution {

    private:

    void solve(int indx , int tar , vector<int>&candidates , 
    vector<vector<int>>&ans , vector<int>&temp , int n)
    {
        if(tar < 0)
            return;

        if(tar == 0)
        {
            ans.push_back(temp);

            return;
        }

        for(int i = indx ; i < n ; i++)
        {
            if(i > indx and candidates[i] == candidates[i-1])
                continue;

            temp.push_back(candidates[i]);

            solve(i + 1 , tar - candidates[i] , candidates , ans , 
                 temp , n);

            temp.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {

        vector<vector<int>>ans;

        vector<int>temp;

        int n = candidates.size();

        sort(begin(candidates) , end(candidates));

        solve(0 , target , candidates , ans , temp , n);

        return ans;
        
    }
};
