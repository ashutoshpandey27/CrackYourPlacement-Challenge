class Solution {
    
    private:
    
     int delRow[4] = {-1 , 0 , 1 , 0};
        
     int delCol[4] = {0 , 1 , 0 , -1};
     
     void solve(int i , int j , string temp , vector<vector<int>> &mat , vector<vector<int>>&vis , vector<string>&ans , int n)
     {
         if(i == n-1 and j == n-1)
         {
             ans.push_back(temp);
             
             return;
         }
         
         if(i >= n or j >= n)
            return;
        
         vis[i][j] = 1;
         
         for(int k = 0 ; k < 4 ; k++)
         {
             int nrow = i + delRow[k];
             
             int ncol = j + delCol[k];
             
             if(nrow >= 0 and nrow < n and ncol >= 0 and ncol < n and !vis[nrow][ncol] and mat[nrow][ncol])
             {
                 if(nrow < i)
                 {
                     solve(nrow , ncol , temp + 'U' , mat , vis , ans , n);
                 }
                 else if(nrow > i)
                 {
                     solve(nrow , ncol , temp + 'D' , mat , vis , ans , n);
                 }
                 else if(ncol > j)
                 {
                     solve(nrow , ncol , temp + 'R' , mat , vis , ans , n);
                 }
                 else
                    solve(nrow , ncol , temp + 'L' , mat , vis , ans , n);
                    
             }
         }
         
         vis[i][j] = 0;
     }
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        
        vector<string>ans;
        
        if(mat[0][0] == 0)
            return ans;
        
        int n = mat.size();
        
        vector<vector<int>>vis(n , vector<int>(n , 0));
        
        string temp = "";
        
        solve(0 , 0 , temp , mat , vis , ans , n);
        
        return ans;
    }
};
