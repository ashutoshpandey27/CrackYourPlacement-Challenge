class Solution {

    int mod = 1e9 + 7;

    int solve(int n , int last_num , unordered_map<int , vector<int>>&adj ,     vector<vector<int>>&dp)
    {
        if(n == 0)
            return 1;

        if(dp[n][last_num] != -1)
            return dp[n][last_num];

        long long int cnt = 0;

        for(auto nums : adj[last_num])
        {
            cnt = (cnt%mod + solve(n-1 , nums , adj , dp)%mod)%mod;
        }

        return dp[n][last_num] = cnt;

    }

public:
    int knightDialer(int n) {

        // make adjaceny list for possible moves from every number

        unordered_map<int , vector<int>>adj;

        adj[0] = {4 , 6};

        adj[1] = {6 , 8};

        adj[2] = {7 , 9};

        adj[3] = {4 , 8};

        adj[4] = {0 , 3 , 9};

        adj[5] = {};

        adj[6] = {0 , 1 , 7};

        adj[7] = {2 , 6};

        adj[8] = {1 , 3};

        adj[9] = {2 , 4};

         int distinctPNo = 0;

         vector<vector<int>>dp(5001 , vector<int>(10 , -1));

     for(int i = 0 ; i <= 9 ; i++)
    {
        distinctPNo = (distinctPNo%mod + solve(n-1 , i , adj , dp)%mod)%mod;
    }
             
        return distinctPNo;
        
    }
};
