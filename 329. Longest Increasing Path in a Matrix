class Solution {

    private:

    int delRow[4] = {-1 , 0 , 1 , 0};

    int delCol[4] = {0 , 1 , 0 , -1};

    int solve(int i , int j , vector<vector<int>>& matrix , 
    vector<vector<int>>&lip , int m , int n)
    {
        int len = 0;

        if(lip[i][j] != -1)
            return lip[i][j];

        for(int k = 0 ; k < 4 ; k++)
        {
            int ni = i + delRow[k];

            int nj = j + delCol[k];

            if(ni >= 0 and ni < m and nj >= 0 and nj < n and 
               matrix[ni][nj] > matrix[i][j])
              {
                  len = max(len , 1 + solve(ni , nj , matrix , 
                   lip , m , n));
              }
        }

        return lip[i][j] = len;
    }


public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {

        int m = matrix.size() , n = matrix[0].size() , max_lip = 0;

        vector<vector<int>>lip(m , vector<int>(n , -1));

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j < n ; j++)
            {

              max_lip = max(max_lip , solve(i , j , matrix , lip , m , n));

            }
        }

        return max_lip + 1;
        
    }
};
