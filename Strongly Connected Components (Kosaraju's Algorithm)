class Solution
{
    
    private:
    
    void dfs(int node , vector<vector<int>>&adj , vector<int>&vis , stack<int>&st)
    {
        vis[node] = 1;
        
        for(auto it : adj[node])
        {
            if(!vis[it])
                dfs(it , adj , vis , st);
        }
        
        st.push(node);
    }
    
    void dfs2(int node , vector<int>adj[] , vector<int>&vis)
    {
        vis[node] = 1;
        
        for(auto it : adj[node])
        {
            if(!vis[it])
                dfs2(it , adj , vis);
        }
    }
	public:
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>&adj)
    {
        
        stack<int>st;
        
        vector<int>vis(V , 0);
        
        for(int i = 0 ; i < V ; i++)
        {
            if(!vis[i])
                dfs(i , adj , vis , st);
        }
        
        vector<int>adjT[V];
        
        for(int i = 0 ; i < V ; i++)
        {
            vis[i] = 0;
            
            for(auto it : adj[i])
            {
                adjT[it].push_back(i);
            }
        }
        
        int cnt = 0;
        
        while(!st.empty())
        {
            if(!vis[st.top()])
            {
                dfs2(st.top() , adjT , vis);
                
                cnt++;
            }
            
            st.pop();
        }
        
        return cnt;
    }
};
