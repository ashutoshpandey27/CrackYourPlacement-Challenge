class Solution {
public:
    int numIslands(vector<vector<char>>&grid) {

        int m = grid.size() , n = grid[0].size();

        vector<vector<int>>vis(m , vector<int>(n , 0));

        int cntIslands = 0;

        int delRow[4] = {-1 , 0 , 1 , 0};

        int delCol[4] = {0 , 1 , 0 , -1};

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j < n ; j++)
            {
                if(grid[i][j] == '1' and vis[i][j] == 0)
                {
                    // grid[i][j] = '-1';

                    vis[i][j] = 1;

                    cntIslands++;

                    queue<pair<int,int>>q;

                    q.push({i , j});

                    while(!q.empty())
                    {
                        int row = q.front().first;

                        int col = q.front().second;

                        q.pop();

                        for(int k = 0 ; k < 4 ; k++)
                        {
                            int nrow = row + delRow[k];

                            int ncol = col + delCol[k];

                            if(nrow >= 0 and nrow < m and ncol >= 0 and ncol < n and grid[nrow][ncol] == '1' and vis[nrow][ncol] == 0)
                            {
                                // grid[nrow][ncol] = '-1';

                                vis[nrow][ncol] = 1;

                                q.push({nrow , ncol});
                            }
                        }
                    }
                }
            }
        }

        return cntIslands;
        
    }
};
