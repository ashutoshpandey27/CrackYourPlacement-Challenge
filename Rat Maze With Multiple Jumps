class Solution {
    
    private:
    
    vector<vector<int>>ans;
    
    bool solve(int i , int j , vector<vector<int>>&matrix , vector<vector<int>>&temp , int n)
    {
        if(i >= n or j >= n)
            return false;
            
        if(i == n-1 and j == n-1)
        {
            ans = temp;
                
            return true;
        }
    
        
        for(int k = 1 ; k <= matrix[i][j] ; k++)
        {
            int ni = i;
            
            int nj = j + k;

            
            if((ni == n-1 and nj == n-1) or (nj < n and matrix[i][nj]))
            {
                temp[i][nj] = 1;
                
                if(solve(i , nj , matrix , temp , n))
                    return true;
                
                temp[i][nj] = 0;
            }
            
            ni = i + k;
            
            nj = j;
            
            if((ni == n-1 and nj == n-1) or (ni < n and matrix[ni][j]))
            {
                temp[ni][j] = 1;
                
                if(solve(ni , j , matrix , temp , n))
                    return true;
                
                temp[ni][j] = 0;
            }
        }
        
        return false;
    }
public:
	vector<vector<int>> ShortestDistance(vector<vector<int>>&matrix){
	   
	   int n = matrix.size();
	   
	   if(n == 1)
	    return {{1}};
	   
	   if(matrix[0][0] == 0)
	    return {{-1}};
	   
	   ans.resize(n , vector<int>(n , 0));
	   
	   vector<vector<int>>temp(n , vector<int>(n , 0));
	   
	   temp[0][0] = 1;
	   
	   solve(0 , 0 , matrix , temp , n);
	   
	   if(ans[0][0] == 0)
	    return {{-1}};
	   
	   return ans;
	}

};
