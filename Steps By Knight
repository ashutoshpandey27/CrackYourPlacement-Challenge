	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&tar,int N)
	{
	    int delRow[8] = {-2 , -2 , -1 , 1 , -1 , 1 , 2 , 2};
	    
	    int delCol[8] = {-1 , 1 , -2 , -2 , 2 , 2 , -1 , 1};
	    
	    queue<pair<int,int>>q;
	    
	    q.push({KnightPos[0] , KnightPos[1]});
	    
	    vector<vector<int>>vis(N + 1 , vector<int>(N + 1 , 0));
	    
	    vis[KnightPos[0]][KnightPos[1]] = 1;
	    
	    int steps = 0;
	    
	    while(!q.empty())
	    {
	        int size = q.size();
	        
	        while(size--)
	        {
	            int row = q.front().first;
	            
	            int col = q.front().second;
	            
	            q.pop();
	            
	            if(row == tar[0] and col == tar[1])
	                return steps;
	            
	            for(int i = 0 ; i < 8 ; i++)
	            {
	                int nrow = row + delRow[i];
	                
	                int ncol = col + delCol[i];
	                
	                if(nrow >= 1 and nrow <= N and ncol >= 1 and ncol <= N and !vis[nrow][ncol])
	                {
	                    q.push({nrow , ncol});
	                    
	                    vis[nrow][ncol] = 1;
	                }   
	            }
	        }
	        
	        steps++;
	    }
	    
	    return steps;
	}
