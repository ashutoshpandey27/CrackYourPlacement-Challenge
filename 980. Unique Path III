class Solution {

    int delRow[4] = {-1 , 0 , 1 , 0};
    
    int delCol[4] = {0 , 1 , 0 , -1};

    int solve(int i , int j , int cntEmp , vector<vector<int>>&grid , int m , int n , 
        vector<vector<int>>&vis)
    {

        if(grid[i][j] == 2 and cntEmp == -1)
            return 1;

        vis[i][j] = 1;

        int cnt = 0;

        for(int k = 0 ; k < 4 ; k++)
        {
            int ni = i + delRow[k];

            int nj = j + delCol[k];

            if(ni >= 0 and ni < m and nj >= 0 and nj < n and grid[ni][nj] != -1 
            and !vis[ni][nj])
            {
                cnt += solve(ni , nj , cntEmp - 1 , grid , m , n , vis);
            }
        }

        // grid[i][j] = 0;

        vis[i][j] = 0;

        return cnt;
    }
public:
    int uniquePathsIII(vector<vector<int>>& grid) {

        int m = grid.size() , n = grid[0].size();

        vector<vector<int>>vis(m , vector<int>(n , 0));

        pair<int,int>src;

        int cntEmp = 0;

        for(int i = 0 ; i < m ; i++)
        {
            for(int j = 0 ; j < n ; j++)
            {
                if(grid[i][j] == 0)
                {
                    cntEmp++;
                }
                else if(grid[i][j] == 1)
                {
                    src = make_pair(i , j);
                }

            }
        }

        return solve(src.first , src.second , cntEmp , grid , m , n , vis);
        
    }
};
