** Naive approach 
Just sort the array

** Optimal approach
// using dutch national flag algo

// according to this algo, we maintain 3 pointer for each color, where middle pointer will move and use to swap with other 2 pointer to place all colors correctly
// so at any instance colors before ptr1 - 1 is of similar to type 0, while all colors after ptr3 + 1 also of same color and of type 3

class Solution {
public:
    void sortColors(vector<int>& nums) {

        int zero = 0 , one = 0 , two = nums.size() - 1;

        while(one <= two)
        {
            if(nums[one] == 0)
            {
                swap(nums[zero] , nums[one]);

                zero++;

                one++;
            }
            else if(nums[one] == 2)
            {
                swap(nums[two] , nums[one]);

                two--;
            }
            else
                one++;
        }
        
    }
};
