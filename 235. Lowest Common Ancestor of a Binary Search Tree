/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {

        // if(!root or (root == p or root == q))
        //     return root;

        // TreeNode* lca1 = lowestCommonAncestor(root->left , p , q);

        // TreeNode* lca2 = lowestCommonAncestor(root->right , p , q);

        // if(lca1 and lca2)
        //     return root;
        
        // if(lca1)
        //     return lca1;

        // return lca2;
        
        // ** Use the concept of BST to find lca optimally

        // agar p and q current root ke corresponding different subtre me h, 
    // or current root p or q ke equal h in this case lca will be root only

       if(!root)
        return root;
       
       if((root->val > p->val) and (root->val > q->val))
            return lowestCommonAncestor(root->left , p , q);
       else if((root->val < p->val) and (root->val < q->val))
            return lowestCommonAncestor(root->right , p , q);
       else
            return root;
        
    }
};
