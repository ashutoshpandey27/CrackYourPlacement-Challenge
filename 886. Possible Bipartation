class Solution {

    private:

    bool solve(int node , int par , vector<int>adj[] , vector<int>&col)
    {
        
        for(auto it : adj[node])
        {
            if(col[it] != -1)
            {
                if(col[it] == col[node])
                    return true;
            }
            else
            {
                col[it] = !col[node];
            
                if(solve(it , node , adj , col))
                    return true;
            }
              
        }

        return false;
    }
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {

        vector<int>adj[n+1];

        for(auto it : dislikes)
        {
            adj[it[0]].push_back(it[1]);

            adj[it[1]].push_back(it[0]);
        }

        vector<int>col(n+1 , -1);

        for(int i = 1 ; i <= n ; i++)
        {
            if(col[i] == -1)
            {
                col[i] = 0;

                if(solve(i , 0 , adj , col))
                    return false;
            }
        }
        
        return true;
    }
};
