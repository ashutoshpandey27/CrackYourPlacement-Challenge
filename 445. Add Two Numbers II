/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

    ListNode* reverse(ListNode* head)
    {
        ListNode* curr = head , *prev = NULL;

        while(curr)
        {
            ListNode* curr_next = curr->next;

            curr->next = prev;

            prev = curr;

            curr = curr_next;
        }

        return prev;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

       ListNode* head1 = reverse(l1);

       ListNode* head2 = reverse(l2);

       ListNode* head = NULL , *tail = NULL;

       int sum = 0 , carry = 0;

       while( head1 and head2)
       {
           sum = head1->val + head2->val + carry;

        //    cout<<sum<<endl;

           int val = sum % 10;

        //    cout<<val<<endl;

           carry = sum / 10;

        //    cout<<

           if(head == NULL)
           {
               head = new ListNode(val);

                tail = head;
           }
           else
           {
               ListNode* temp = new ListNode(val);

               tail->next = temp;

               tail = tail->next;
           }

           head1 = head1->next;

           head2 = head2->next;


       }

    

         while(head1)
         {
             int sum1 = head1->val + carry;


             int val1 = sum1 % 10;

             carry = sum1 / 10;

             ListNode* temp = new ListNode(val1);

             tail->next = temp;

             tail = tail->next;

             head1 = head1->next;
         }

         while(head2)
         {
             int sum2 = head2->val + carry;

             int val2 = sum2 % 10;

             carry = sum2 / 10;

             ListNode* temp = new ListNode(val2);

             tail->next = temp;

             tail = tail->next;

             head2 = head2->next;
         }

            if(carry == 1)
       {
           
             ListNode* temp = new ListNode(1);

             tail->next = temp;

             tail = tail->next;
         
       }

           head = reverse(head);

            return head;

        
    }
};
