/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    private:

    // void inorder(TreeNode* root , vector<int>&in)
    // {
    //     if(!root)
    //         return;

    //     inorder(root->left , in);

    //     in.push_back(root->val);

    //     inorder(root->right , in);
    // }

    // void solve(TreeNode* &root , vector<int>&in , int &indx)
    // {
    //     if(!root)
    //         return;

    //     solve(root->left , in , indx);

    //     root->val = in[indx++];

    //     solve(root->right , in , indx);
    // }

    void solve(TreeNode* root , TreeNode*& prev , TreeNode* &first ,         
    TreeNode* &second)
    {
        if(!root)
            return;

        solve(root->left , prev , first , second);

        if(prev and (root->val < prev->val))
        {
            if(!first)
                first = prev;
            
            second = root;
        }

        prev = root;

        solve(root->right , prev , first , second);
    }
public:
    void recoverTree(TreeNode* root) {

        // approach 1 (brute force)

        // vector<int>in;

        // inorder(root , in);

        // sort(begin(in) , end(in));

        // int indx = 0;

        // solve(root , in , indx);

        // ** approach - efficient

        TreeNode* prev = NULL , *first = NULL , *second = NULL;

        solve(root , prev , first , second);

        swap(first->val , second->val);
        
    }
};
