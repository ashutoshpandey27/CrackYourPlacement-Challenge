class Solution {
    
     private:

    void solve(Node* root ,  unordered_map<long long , long long>&psum , 
    int tar , long long &cnt , long long currSum)
    {
        if(!root)
            return;

        currSum += root->data;

        if(currSum == tar)
            cnt++;

        if(psum.count(currSum - tar) and psum[currSum - tar])
        {
            cnt += psum[currSum - tar];
        }

        psum[currSum]++;

        solve(root->left , psum , tar , cnt , currSum);

        solve(root->right , psum , tar , cnt , currSum);

        psum[currSum]--;

    }

  public:
    int sumK(Node *root, int k) {
        
        if(!root)
            return 0;
        
        if(!root->left and !root->right)
        {
            return root->data == k;
        }

         unordered_map<long long , long long>psum;

         long long cnt = 0;

         solve(root , psum , k , cnt , 0);

         return cnt;
        
        
    }
};
