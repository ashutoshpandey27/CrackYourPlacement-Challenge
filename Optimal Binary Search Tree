class Solution{
    public:
    int optimalSearchTree(int keys[], int freq[], int n)
    {
        vector<pair<int , int>>temp;
        
        for(int i = 0 ; i < n ; i++)
        {
            temp.push_back({keys[i] , freq[i]});
        }
        
        sort(begin(temp) , end(temp));
        
        vector<int>psum(n , 0);
        
        psum[0] = temp[0].second;
        
        for(int i = 1 ; i < n ; i++)
        {
            psum[i] = psum[i-1] + temp[i].second;
        }
        
        vector<vector<int>>dp(n , vector<int>(n , INT_MAX));
        
        for(int i = 0 ; i < n ; i++)
        {
            dp[i][i] = temp[i].second;
        }
        
        for(int i = n-1 ; i >=  0 ; i--)
        {
            for(int j = i + 1 ; j < n ; j++)
            {
                for(int k = i ; k <= j ; k++)
                {
                    int leftSubTree = (k > i ? dp[i][k-1] : 0);
                    
                    int rightSubTree = (k < j ? dp[k+1][j] : 0);
                    
                    int currCost = psum[j] - (i > 0 ? psum[i - 1] : 0);
                    
                    dp[i][j] = min(dp[i][j] , leftSubTree + rightSubTree + currCost);
                }
            }
        }
        
        return dp[0][n-1];
    }
};
