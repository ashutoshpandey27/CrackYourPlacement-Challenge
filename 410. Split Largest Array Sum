class Solution {

    private:

    int countSubarray(vector<int>&nums , int n , int maxSum)
    {
        int cnt = 1 , sum = 0;

        for(int i = 0 ; i < n ; i++)
        {
            if(nums[i] + sum <= maxSum)
            {
                sum += nums[i];
            }
            else
            {
                cnt++;

                sum = nums[i];
            }
        }

        return cnt;
    }
public:
    int splitArray(vector<int>& nums, int k) {

        int n = nums.size();

        int s = *max_element(begin(nums) , end(nums)) , 
                e = accumulate(begin(nums) , end(nums) , 0);

        int maxSum = 0;

        while(s <= e)
        {
            int mid = s + (e-s)/2;

            int cnt = countSubarray(nums , n , mid);

            if(cnt <= k)
            {
                maxSum = mid;

                e = mid - 1;
            }
            else
            {
                s = mid + 1;
            }
        }

        return maxSum;
        
    }
};
