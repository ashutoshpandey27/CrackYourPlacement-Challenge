class RandomizedCollection {

    private:

    unordered_map<int , vector<int>>mp; // {val , {indx1 , indx2 , ...}}

    vector<int>vec;

public:
    RandomizedCollection() {
        
    }
    
    bool insert(int val) {

        bool flag = true;

        if(mp.count(val))
        {
            flag = false;
        }

        vec.push_back(val);

        int indx = vec.size() - 1;

        mp[val].push_back(indx);

        return flag;
        
    }
    
    bool remove(int val) {

        if(mp.count(val) == 0)
            return false;

        int indx = mp[val].back();

        mp[val].pop_back();

        if(mp[val].size() == 0)
        {
            mp.erase(val);
        }

        if(indx == vec.size() - 1)
            vec.pop_back();
        else
        {
            vec[indx] = vec.back();

            mp[vec.back()].pop_back();

            mp[vec.back()].push_back(indx);

            sort(begin(mp[vec.back()]) , end(mp[vec.back()]));

            vec.pop_back();
        

        }

        cout<<indx<<endl;

        
        return true;
        
    }
    
    int getRandom() {

        if(!vec.size())
            return 0;

        int indx = rand()%vec.size();

        return vec[indx];
        
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
