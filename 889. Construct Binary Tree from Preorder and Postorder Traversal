/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    private:

    TreeNode* solve(int preStart , int preEnd , int postStart , int postEnd ,
     vector<int>& preorder, vector<int>& postorder)
     {
          if(preStart > preEnd)
            return NULL;

          TreeNode* root = new TreeNode(preorder[preStart]);

          if(preStart == preEnd)
            return root;

          int postIndx = postStart;

          while(preorder[preStart + 1] != postorder[postIndx])
            postIndx++;

          int len = postIndx - postStart + 1;

          root->left = solve(preStart + 1 , preStart + len , 
                        postStart , postIndx , preorder , postorder);
          
          root->right = solve(preStart + len + 1 , preEnd , postIndx + 1 , 
                        postEnd - 1 , preorder , postorder);

          return root;
     }
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {

        return solve(0 , preorder.size() - 1 , 0 , postorder.size() - 1 , 
        preorder , postorder);
        
    }
};
