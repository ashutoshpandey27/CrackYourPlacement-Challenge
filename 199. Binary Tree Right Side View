/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    private:

    void solve(TreeNode* root , int level , vector<int>&rv)
    {
        if(!root)
            return;

        if(level == rv.size())
            rv.push_back(root->val);

        solve(root->right , level + 1 , rv);

        solve(root->left , level + 1 , rv);
    }
public:
    vector<int> rightSideView(TreeNode* root) {
        
        // vector<int>ans;
        // if(root == NULL)
        // return ans;

        // queue<TreeNode*>q;
        // q.push(root);

        // while(!q.empty())
        // {
        //     int size = q.size();

        //     for(int i = 0 ; i < size ; i++)
        //     {
        //         TreeNode* node = q.front();
        //         q.pop();
                
        //         if(i == 0)
        //          ans.push_back(node->val);

        //         if(node->right)
        //         q.push(node->right);

        //         if(node->left)
        //         q.push(node->left);
        //     }


                    
        // }

        // return ans;

        // ** using dfs

        vector<int>rv;

        solve(root , 0 , rv);

        return rv;
    }
};
