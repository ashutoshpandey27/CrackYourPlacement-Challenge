class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) 
    {
        //  row size
        int n = grid.size();
        
        // col size
        int m = grid[0].size();
        
        // { { row , col } , time };
        queue<pair<pair<int,int>,int>>q;
        
        int vis[n][m];
        
        int cntfresh = 0;
        
        for(int i = 0 ; i < n ; i++)
        {
            for(int j = 0 ; j < m ; j++)
            {
                if(grid[i][j] == 2)
                {
                    q.push({ { i  , j } , 0});
                    vis[i][j] = 2;
                }
                else
                {
                    vis[i][j] = 0;
                }
                 if(grid[i][j] == 1)
                {
                    cntfresh++;
                }
                
                
            }
        }
        
        int cnt = 0 , tm = 0;
        
        int delrow[] = { -1 , 0 , 1 , 0 };
        int delcol[] = { 0 , 1 , 0 , -1 };
        
        while(!q.empty())
        {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();
            
            tm = max(tm,t);
            
            for(int i = 0 ; i < 4 ; i++)
            {
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
                
                if(nrow >= 0 and nrow < n and ncol >= 0 and ncol < m 
                and vis[nrow][ncol] == 0 and grid[nrow][ncol] == 1)
                {
                    q.push({{nrow,ncol},t+1});
                    vis[nrow][ncol] = 2;
                    cnt++;
                }
            }
            
            
            
        }
        
        if(cnt != cntfresh)
            return -1;
            
            return tm;
            
            
        
        }
        
        
       
    
};
