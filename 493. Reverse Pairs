class Solution {

    private:

    int cntPairs = 0;

    void merge(vector<int>&nums , int s , int mid , int e)
    {
        vector<int>temp;

        int l = s , h = mid + 1;

        while(l <= mid and h <= e)
        {
            if(nums[l] >= nums[h])
            {   
                temp.push_back(nums[h]);

                h++;
            }
            else
            {
                temp.push_back(nums[l]);

                l++;
            }
        }

        while(l <= mid)
        {
            temp.push_back(nums[l]);

            l++;
        }

        while(h <= e)
        {
            temp.push_back(nums[h]);

            h++;
        }

        for(int i = s ; i <= e ; i++)
        {
            nums[i] = temp[i - s];
        }
    }

    void countPairs(vector<int>&nums, int s , int mid , int e)
    {
        int l = s , r = mid + 1;

        for(int i = l ; i <= mid ; i++)
        {
            while(r <= e and (nums[i] > 1ll*nums[r]*2))
            {
                r++;
            }

            cntPairs += r - (mid + 1);

        }
    }

    void mergeSort(vector<int>&nums , int s , int e)
    {
        if(s >= e)
            return;

        int mid = s + (e - s)/2;

        mergeSort(nums , s , mid);

        mergeSort(nums , mid + 1 , e);

        countPairs(nums , s , mid , e);

        merge(nums , s , mid , e); 
    }
public:
    int reversePairs(vector<int>& nums) {

        // naive approach with O(n^2) t.c.

        // int n = nums.size();

        // int cntPairs = 0;

        // for(int i = 0 ; i < n ; i++)
        // {
        //     for(int j = i + 1; j < n ; j++)
        //     {
        //         if(nums[i] > 1ll*2*nums[j])
        //             cntPairs++;
        //     }
        // }
        
        // return cntPairs;

        // ** Optimal approach using merge sort technique

        int n = nums.size();

        mergeSort(nums , 0 , n-1);

        return cntPairs;
    }
};
