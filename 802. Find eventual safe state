class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {

        int V = graph.size();
        vector<int>revAdj[V];
        int in_degree[V];
        for(int i = 0 ; i < V ; i++)
        {
            in_degree[i] = 0;
        }
        queue<int>q;
        vector<int>safe;

        
           for(int i = 0 ; i < V ; i++)
           {
               for(auto it : graph[i])
               {
                  revAdj[it].push_back(i);
                  in_degree[i]++;
               }
           }
        

        for(int i = 0 ; i < V ; i++)
        {
             if(in_degree[i] == 0)
             {
                 q.push(i);
             }
        }

        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            safe.push_back(node);

            for(auto it : revAdj[node])
            {
                if(--in_degree[it] == 0)
                {
                    q.push(it);
                }
            }
        }

        sort(safe.begin() , safe.end());

        return safe;

        
    }
};
