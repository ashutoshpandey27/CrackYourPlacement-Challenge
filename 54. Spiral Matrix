class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {

         int m = matrix.size() , n = matrix[0].size();

         vector<int>ans;

         int top = 0 , bottom = m-1 , left = 0 , right = n-1;

         while(top <= bottom and left <= right)
         {
            //  traverse top row from left to right 

            for(int i = left; i <= right; i++)
            {
                ans.push_back(matrix[top][i]);
            }

            top++; 

            // traverse right column from top to bottom

            for(int i = top; i <= bottom; i++)
            {
                ans.push_back(matrix[i][right]);
            }

            right--;

            if(top <= bottom)
            {
                // traverse bottom row from right to left

                for(int i = right; i >= left; i--)
                {
                    ans.push_back(matrix[bottom][i]);
                }

                bottom--;
            }

            if(left <= right)
            {
                // traverse left column from bottom to top

                for(int i = bottom; i >= top; i--)
                {
                    ans.push_back(matrix[i][left]);
                }

                left++;
            }
         }

         return ans;
    }
};
