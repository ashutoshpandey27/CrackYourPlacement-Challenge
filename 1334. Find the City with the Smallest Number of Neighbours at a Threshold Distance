class Solution {

public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {

        vector<pair<int,int>>adj[n];

        for(auto &it : edges)
        {
            adj[it[0]].push_back({it[1] , it[2]});

            adj[it[1]].push_back({it[0] , it[2]});
        }

        int minCnt = 1e9 , ans = -1;

        for(int i = 0 ; i < n ; i++)
        {

            priority_queue<pair<int,int> , vector<pair<int,int>> , 
            greater<pair<int , int>>>pq;

            vector<int>dist(n , 1e9);

            dist[i] = 0;

            pq.push({0 , i});

            while(!pq.empty())
            {
                int node = pq.top().second;
                
                int d = pq.top().first;

                pq.pop();

                for(auto &adjNode : adj[node])
                {
                    if(dist[adjNode.first] > d + adjNode.second)
                    {
                        dist[adjNode.first] = d + adjNode.second;

                        pq.push({dist[adjNode.first] , adjNode.first});
                    }
                }

            }

            int cnt = 0;

            for(int j = 0 ; j < n ; j++)
            {
                if(i != j and (dist[j] <= distanceThreshold))
                    cnt++;
            }

            cout<<i<<" "<<cnt<<endl;

            if(cnt <= minCnt)
            {
                ans = i;

                minCnt = cnt;
            }

        }

        return ans;
        
    }
};
